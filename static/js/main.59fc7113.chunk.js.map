{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","props","dispatch","useContext","TodosContext","className","completed","type","checked","onChange","event","payload","id","title","onClick","TodoList","todos","map","todo","toggleComplete","deleteTodo","Footer","itemsLeft","to","clearComplete","createContext","reducer","state","action","userInput","Date","now","newTodo","filter","App","useReducer","todosList","handleChange","target","value","handleKeydown","key","useEffect","window","addEventListener","removeEventListener","Provider","exact","path","placeholder","autoFocus","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.59fc7113.chunk.js","sourcesContent":["import { useContext } from \"react\";\nimport { TodosContext } from \"../App\";\n\nfunction TodoItem(props) {\n  const dispatch = useContext(TodosContext);\n  return (\n    <li className={props.completed ? \"completed\" : \"\"}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={props.completed}\n          //onChange={props.toggleComplete}\n          onChange={(event) =>\n            dispatch({ type: \"TOGGLE_COMPLETE\", payload: props.id })\n          }\n        />\n        <label>{props.title}</label>\n        <button\n          className=\"destroy\"\n          onClick={(event) =>\n            dispatch({ type: \"DELETE_TODO\", payload: props.id })\n          }\n        />\n      </div>\n    </li>\n  );\n}\n\nexport default TodoItem;\n","import TodoItem from \"./TodoItem\";\n\nfunction TodoList(props) {\n  return (\n    <section className=\"main\">\n      <ul className=\"todo-list\">\n        {props.todos.map((todo) => (\n          <TodoItem\n            title={todo.title}\n            completed={todo.completed}\n            id={todo.id}\n            key={todo.id}\n            toggleComplete={props.toggleComplete}\n            deleteTodo={props.deleteTodo}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nexport default TodoList;\n","import { Link } from \"react-router-dom\";\n\nfunction Footer(props) {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{props.itemsLeft} </strong> item(s) left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <Link to=\"/\">All</Link>\n        </li>\n        <li>\n          <Link to=\"/active\">Active</Link>\n        </li>\n        <li>\n          <Link to=\"/completed\">Completed</Link>\n        </li>\n      </ul>\n      <button\n        className=\"clear-completed\"\n        onClick={(event) => props.clearComplete(event)}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import \"./App.css\";\nimport { useEffect, useReducer, createContext } from \"react\";\nimport todosList from \"./todos.json\";\n//import TodoItem from \"./components/TodoItem\";\nimport TodoList from \"./components/TodoList\";\nimport Footer from \"./components/Footer\";\nimport { Route } from \"react-router-dom\";\n\nexport const TodosContext = createContext(null);\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"UPDATE_INPUT\":\n      return {\n        ...state,\n        userInput: action.payload,\n      };\n    case \"ADD_TODO\":\n      return {\n        userInput: \"\",\n\n        todos: [\n          ...state.todos,\n          {\n            title: action.payload,\n            id: Date.now(),\n            completed: false,\n          },\n        ],\n      };\n    case \"TOGGLE_COMPLETE\":\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          let newTodo = { ...todo };\n          if (newTodo.id === action.payload) {\n            newTodo.completed = !newTodo.completed;\n          }\n          return newTodo;\n        }),\n      };\n    case \"DELETE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\n      };\n    case \"CLEAR_COMPLETE\":\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => !todo.completed),\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  //const [todos, setTodos] = useState(todosList);\n  //const [userInput, setUserInput] = useState(\"\");\n\n  const [state, dispatch] = useReducer(reducer, {\n    todos: todosList,\n    userInput: \"\",\n  });\n\n  function handleChange(event) {\n    //setUserInput(event.target.value);\n    dispatch({ type: \"UPDATE_INPUT\", payload: event.target.value });\n  }\n\n  function handleKeydown(event) {\n    if (event.key === \"Enter\") {\n      dispatch({ type: \"ADD_TODO\", payload: state.userInput });\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeydown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeydown);\n    };\n  });\n\n  //function toggleComplete(event, todoId) {\n  //\n  //}\n  //\n  //function deleteTodo(event, todoId) {\n  //\n  //}\n\n  function clearComplete(event) {\n    dispatch({ type: \"CLEAR_COMPLETE\" });\n  }\n\n  return (\n    <>\n      <TodosContext.Provider value={dispatch}>\n        <Route exact path=\"/\">\n          <section className=\"todoapp\">\n            <header className=\"header\">\n              <h1>todos</h1>\n              <input\n                className=\"new-todo\"\n                placeholder=\"What needs to be done?\"\n                autoFocus\n                onChange={(event) => handleChange(event)}\n                value={state.userInput}\n              />\n            </header>\n            <TodoList\n              todos={state.todos}\n              //toggleComplete={toggleComplete}\n              //deleteTodo={deleteTodo}\n            />\n            <Footer\n              clearComplete={clearComplete}\n              itemsLeft={\n                state.todos.filter((todo) => {\n                  if (todo.completed === true) {\n                    return false;\n                  }\n                  return true;\n                }).length\n              }\n            />\n          </section>\n        </Route>\n        <Route exact path=\"/active\">\n          <section className=\"todoapp\">\n            <header className=\"header\">\n              <h1>todos</h1>\n              <input\n                className=\"new-todo\"\n                placeholder=\"What needs to be done?\"\n                autoFocus\n                onChange={(event) => handleChange(event)}\n                value={state.userInput}\n              />\n            </header>\n            <TodoList\n              todos={state.todos.filter((todo) => {\n                if (todo.completed === true) {\n                  return false;\n                }\n                return true;\n              })}\n              //toggleComplete={toggleComplete}\n              //deleteTodo={deleteTodo}\n            />\n            <Footer\n              clearComplete={clearComplete}\n              itemsLeft={\n                state.todos.filter((todo) => {\n                  if (todo.completed === true) {\n                    return false;\n                  }\n                  return true;\n                }).length\n              }\n            />\n          </section>\n        </Route>\n        <Route exact path=\"/completed\">\n          <section className=\"todoapp\">\n            <header className=\"header\">\n              <h1>todos</h1>\n              <input\n                className=\"new-todo\"\n                placeholder=\"What needs to be done?\"\n                autoFocus\n                onChange={(event) => handleChange(event)}\n                value={state.userInput}\n              />\n            </header>\n            <TodoList\n              todos={state.todos.filter((todo) => {\n                if (todo.completed === true) {\n                  return true;\n                }\n                return false;\n              })}\n              //toggleComplete={toggleComplete}\n              //deleteTodo={deleteTodo}\n            />\n            <Footer\n              clearComplete={clearComplete}\n              itemsLeft={\n                state.todos.filter((todo) => {\n                  if (todo.completed === true) {\n                    return false;\n                  }\n                  return true;\n                }).length\n              }\n            />\n          </section>\n        </Route>\n      </TodosContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/lite-todo-app\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}